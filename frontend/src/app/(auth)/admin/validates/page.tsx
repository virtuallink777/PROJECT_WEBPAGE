"use client";

import { Button } from "@/components/ui/button";
//import { socket } from "@/lib/socket";

import { useSocketContext } from "@/context/SocketContext"; // NUEVO -> Importamos el hook del contexto

import Image from "next/image";
import { useEffect, useState } from "react";
//import { Socket } from "socket.io-client";

// üîπ Extender el tipo de Window para incluir 'socket'
//declare global {
//interface Window {
// socket: Socket;
// }
//}

interface PublicationForValidation {
  // Renombr√© para mayor claridad
  userId: string;
  id: string; // Este es el ID de la publicaci√≥n
  images: { url: string }[]; // Im√°genes originales de la publicidad
  videos?: { url: string }[]; // Opcional: si tienes videos, los a√±adimos aqu√≠
  email: string;
  shippingDateValidate: string;
  responseUrls: Record<string, string>; // Fotos de cartel/rostro subidas para validaci√≥n
  estadoActual?: string; // Opcional: para saber si est√° pendiente, en revisi√≥n de ID, etc.

  // NUEVA PROPIEDAD OPCIONAL para las URLs de los documentos de identidad
  identityDocumentUrls?: {
    documentFront: string;
    documentBack: string;
  };
  // Opcional: un campo para indicar el tipo de validaci√≥n que es, si es necesario
  // validationType?: "PUBLICITY" | "IDENTITY_DOCUMENT";
}

interface Payload {
  userId: string;
  publicationId: string; // ID de la publicaci√≥n a la que pertenecen estos documentos
  fileUrls: {
    // URLs de documentFront y documentBack
    documentFront: string;
    documentBack: string;
  };
  images?: { url: string }[]; // Im√°genes originales de la publicaci√≥n
  videos?: { url: string }[]; // Si tienes videos, los a√±adimos aqu√≠
  email?: string; // Email del usuario, opcional
  shippingDateValidate?: string; // Fecha de env√≠o para validar, opcional
  responseUrls?: Record<string, string>; // Fotos de cartel/rostro subidas para validaci√≥n
}

// Interfaz para los datos que llegan del evento "validate-identity-document"
interface IdentityValidationPayload {
  userId: string;
  publicationId: string; // ID de la publicaci√≥n a la que pertenecen estos documentos
  //body: any;
  fileUrls: {
    // URLs de documentFront y documentBack
    documentFront: string;
    documentBack: string;
  };
}

interface UpdateStatePublication {
  id: string;
  estado: string;
  razon: string;
}

async function obtenerIdAdmin() {
  try {
    const response = await fetch("/api/userId");
    const data: { userId: string } = await response.json();
    return data.userId;
  } catch (error) {
    console.error("Error al obtener el ID del usuario:", error);
    return null;
  }
}

async function guardarUserId() {
  try {
    const userId = await obtenerIdAdmin();
    if (userId) {
      localStorage.setItem("userId", userId);
      console.log("‚úÖ userId guardado en localStorage:", userId);
    } else {
      console.log("‚ö†Ô∏è No se obtuvo un userId v√°lido.");
    }
  } catch (error) {
    console.error("Error al guardar el userId:", error);
  }
}

const AdminPanel = () => {
  // NUEVO -> Obtenemos el socket √öNICO desde el contexto
  const { socket } = useSocketContext();

  const [publicaciones, setPublicaciones] = useState<
    PublicationForValidation[]
  >([]);
  //const [userId, setUserId] = useState<string | null>(null);

  // Estado para almacenar las URLs de las im√°genes agrandadas
  const [activeImages, setActiveImages] = useState<string[]>([]);

  useEffect(() => {
    // NUEVO -> Condici√≥n de seguridad, no hacer nada si el socket no est√° listo
    if (!socket) return;

    //const handleConnect = () => {
    //console.log("ADMIN_FRONTEND: Socket conectado! ID:", socket.id); // <-- Log del ID del socket

    // Ahora que estamos conectados, intentamos identificar al admin
    async function fetchAndIdentifyAdmin() {
      await guardarUserId(); // Obtener y guardar el userId del admin

      const storedUserId = localStorage.getItem("userId");
      console.log(
        "üìå userId en localStorage (despu√©s de conectar):",
        storedUserId
      );
      if (storedUserId) {
        //setUserId(storedUserId); // Actualizar estado local si es necesario

        const adminData = {
          adminId: storedUserId,
          email: "luiscantorhitchclief@gmail.com", // O el email real del admin
        };
        console.log(
          "ADMIN_FRONTEND: Enviando 'identificar-admin' con datos:",
          adminData
        );

        socket?.emit("identificar-admin", adminData);
      } else {
        console.log(
          "ADMIN_FRONTEND: ‚ùå No se encontr√≥ userId en localStorage para identificar al admin."
        );
      }
    }
    // Si el socket est√° conectado, nos identificamos.
    // Si no lo est√°, el SocketProvider lo conectar√° y este efecto se re-ejecutar√° cuando 'socket' cambie de null a una instancia.
    if (socket.connected) {
      fetchAndIdentifyAdmin();
    } else {
      // Opcional: escuchar el evento 'connect' solo para identificarse
      socket.once("connect", fetchAndIdentifyAdmin);
    }

    // Limpieza: quitar el listener por si el componente se desmonta antes de conectar
    return () => {
      socket.off("connect", fetchAndIdentifyAdmin);
    };
  }, [socket]); // NUEVO -> El efecto depende del socket

  // // Funci√≥n para manejar el clic en una imagen
  // const handleImageClick = (url: string) => {
  //   if (activeImages.includes(url)) {
  //     // Si la imagen ya est√° activa, la quitamos del estado
  //     setActiveImages(activeImages.filter((activeUrl) => activeUrl !== url));
  //   } else {
  //     // Si la imagen no est√° activa, la agregamos al estado
  //     setActiveImages([...activeImages, url]);
  //     // Inicializar la posici√≥n de la imagen agrandada
  //   }
  // };

  const UpdateStatePublication = async (data: UpdateStatePublication) => {
    const { id, estado, razon } = data;
    console.log("Datos enviados al state-pub:", data);
    try {
      // Llamar a la API para actualizar el estado en la base de datos
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/state-publication/`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ estado, razon, id }),
        }
      );
      if (!response.ok) {
        throw new Error("Error al actualizar el estado de la publicaci√≥n");
      }
      const result = await response.json();
      console.log("Estado actualizado:", result);
      return result;
    } catch (error) {
      console.error("Error al actualizar el estado de la publicaci√≥n:", error);
    }
  };

  useEffect(() => {
    // Condici√≥n de seguridad, no hacer nada si el socket no est√° listo.
    if (!socket) return;

    // 1. Definimos el handler con la firma correcta: recibe UN solo argumento.
    const handleValidatePublication = (payload: Payload) => {
      console.log(
        "ADMIN_FRONTEND: RECIBIDO 'validate-publication' con payload:",
        payload
      );

      // Verificaci√≥n de seguridad para asegurar que el payload es v√°lido.
      if (!payload || !payload.publicationId) {
        console.error("Payload de validaci√≥n inv√°lido recibido del backend.");
        return;
      }

      // 2. Construimos el nuevo objeto para el estado.
      //    Mapeamos directamente las propiedades del 'payload' que nos env√≠a el backend
      //    a la estructura que tu interfaz 'PublicationForValidation' espera.
      const nuevaPublicacion: PublicationForValidation = {
        userId: payload.userId,
        id: payload.publicationId,
        images: payload.images || [], // Las im√°genes originales de la publicaci√≥n
        videos: payload.videos || [], // Si tienes videos, los a√±adimos aqu√≠
        email: payload.email || "No especificado",
        shippingDateValidate:
          payload.shippingDateValidate || new Date().toISOString(),

        // La propiedad 'responseUrls' de tu estado se llena con 'validationImages' del payload.
        responseUrls: payload.responseUrls || {},

        // Puedes a√±adir valores por defecto para otras propiedades si es necesario
        estadoActual: "PENDIENTE_VALIDACION",
      };

      console.log(
        "Nueva publicaci√≥n formateada para a√±adir al estado:",
        nuevaPublicacion
      );

      // 3. Actualizamos el estado de 'publicaciones'.
      setPublicaciones((prevPublicaciones) => {
        // Evitamos a√±adir duplicados si el evento llega varias veces.
        const yaExiste = prevPublicaciones.some(
          (p) => p.id === nuevaPublicacion.id
        );
        if (yaExiste) {
          console.log(
            `La publicaci√≥n ${nuevaPublicacion.id} ya existe en la lista. No se a√±adir√° de nuevo.`
          );
          return prevPublicaciones;
        }

        const nuevasPublicaciones = [...prevPublicaciones, nuevaPublicacion];

        // Actualizamos el localStorage para persistencia.
        localStorage.setItem(
          "publicaciones",
          JSON.stringify(nuevasPublicaciones)
        );

        return nuevasPublicaciones;
      });
    };

    // 4. Registramos el listener en el socket.
    socket.on("validate-publication", handleValidatePublication);
    console.log("Listener para 'validate-publication' registrado.");

    // 5. Devolvemos la funci√≥n de limpieza para evitar fugas de memoria.
    return () => {
      socket.off("validate-publication", handleValidatePublication);
      console.log("Listener para 'validate-publication' limpiado.");
    };
  }, [socket]); // El efecto depende del socket para registrarse.

  // üîπ Obtener publicaciones guardadas en localStorage
  useEffect(() => {
    if (typeof window !== "undefined") {
      const storedData = localStorage.getItem("publicaciones");

      if (storedData) {
        setPublicaciones(JSON.parse(storedData));
        try {
          const parsedData = JSON.parse(storedData);
          const formattedData = Array.isArray(parsedData)
            ? parsedData.map((pub) => ({
                ...pub,
                images: Array.isArray(pub.images)
                  ? pub.images.map((img: string) =>
                      typeof img === "string" ? { url: img } : img
                    )
                  : [],
              }))
            : [];
          setPublicaciones(formattedData);
        } catch (error) {
          console.error("Error al parsear datos de localStorage:", error);
        }
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // ‚úÖ Solo ejecuta esto al montar el componente

  useEffect(() => {
    // NUEVO -> Condici√≥n de seguridad
    if (!socket) return;
    const handleIdentityDocumentValidationRequest = async (
      // <--- Convertir a async
      data: IdentityValidationPayload
    ) => {
      console.log(
        "ADMIN_FRONTEND: (useEffect 2) RECIBIDO evento 'validate-identity-document' con datos:",
        data
      );

      if (
        !data.publicationId ||
        !data.fileUrls ||
        !data.fileUrls.documentFront ||
        !data.fileUrls.documentBack
      ) {
        console.error(
          "ADMIN_FRONTEND: (useEffect 2) Datos incompletos en evento 'validate-identity-document'. Faltan publicationId o fileUrls."
        );
        return;
      }

      // Intenta encontrar y actualizar directamente si ya existe
      let publicationFoundInState = false;
      setPublicaciones((prevPublicaciones) => {
        const updated = prevPublicaciones.map((pub) => {
          if (pub.id === data.publicationId) {
            publicationFoundInState = true;
            console.log(
              `ADMIN_FRONTEND: (useEffect 2) Encontrada publicaci√≥n ${pub.id} en estado. Adjuntando URLs de documentos.`
            );
            return {
              ...pub,
              identityDocumentUrls: data.fileUrls,
              estadoActual: "REVISION_IDENTIDAD",
            };
          }
          return pub;
        });

        if (publicationFoundInState) {
          localStorage.setItem("publicaciones", JSON.stringify(updated));
          console.log(
            "ADMIN_FRONTEND: (useEffect 2) Estado de publicaciones (actualizaci√≥n directa) con documentos:",
            updated
          );
          return updated;
        }
        return prevPublicaciones; // Si no se encontr√≥, devolvemos el estado sin cambios por ahora, se manejar√° abajo
      });

      // Si la publicaci√≥n NO se encontr√≥ en el estado actual, haz un fetch para obtenerla
      if (!publicationFoundInState) {
        console.log(
          `ADMIN_FRONTEND: (useEffect 2) Publicaci√≥n ${data.publicationId} no encontrada en estado. Intentando fetch...`
        );
        try {
          const response = await fetch(
            `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/editPublications/${data.publicationId}` // Usar data.publicationId
          );

          if (!response.ok) {
            throw new Error(
              `HTTP error! status: ${response.status} al buscar PubID: ${data.publicationId}`
            );
          }

          const fetchedPublicationData = await response.json(); // Asume que esto devuelve un objeto PublicationForValidation o similar
          console.log(
            "ADMIN_FRONTEND: (useEffect 2) Publicaci√≥n obtenida por fetch:",
            fetchedPublicationData
          );

          // Aseg√∫rate de que fetchedPublicationData tenga la estructura esperada
          // (userId, id, images, email, shippingDateValidate, etc.)
          // y que el 'id' coincida con data.publicationId.

          if (
            fetchedPublicationData &&
            fetchedPublicationData._id === data.publicationId
          ) {
            console.log(
              `ADMIN_FRONTEND: (useEffect 2) IDs coinciden: fetched._id (${fetchedPublicationData._id}) y data.publicationId (${data.publicationId})`
            );
            const publicationWithIdentityDocs: PublicationForValidation = {
              // Mapea las propiedades de fetchedPublicationData a PublicationForValidation
              id: fetchedPublicationData._id, // <--- CAMBIO AQU√ç: Asigna _id a id
              userId: fetchedPublicationData.userId || data.userId, // Prioriza el de fetched, o usa el del evento
              email: fetchedPublicationData.email || "", // Asegurar que email exista
              images: fetchedPublicationData.images || [], // Asegurar que images exista
              // responseUrls podr√≠an venir de fetchedPublicationData o podr√≠as decidir no mezclarlas si son de contextos diferentes
              responseUrls: fetchedPublicationData.responseUrls || {},
              shippingDateValidate:
                fetchedPublicationData.shippingDateValidate || "",

              identityDocumentUrls: data.fileUrls, // A√±adir los documentos de identidad del evento
              estadoActual: "REVISION_IDENTIDAD", // Establecer el estado
            };

            // Ahora a√±ade o actualiza esta publicaci√≥n completa en el estado
            setPublicaciones((prevPublicaciones) => {
              // Evitar duplicados si por alguna raz√≥n ahora s√≠ existe (carrera de condiciones)
              const filteredPrev = prevPublicaciones.filter(
                (pub) => pub.id !== publicationWithIdentityDocs.id
              );
              const nuevasPublicaciones = [
                ...filteredPrev,
                publicationWithIdentityDocs,
              ];

              localStorage.setItem(
                "publicaciones",
                JSON.stringify(nuevasPublicaciones)
              );
              console.log(
                "ADMIN_FRONTEND: (useEffect 2) Estado de publicaciones (despu√©s de fetch y a√±adir/actualizar):",
                nuevasPublicaciones
              );
              return nuevasPublicaciones;
            });
          } else {
            console.error(
              `ADMIN_FRONTEND: (useEffect 2) Error: Datos de publicaci√≥n (${data.publicationId}) obtenidos por fetch no son v√°lidos o ID no coincide.`
            );
          }
        } catch (error) {
          console.error(
            `ADMIN_FRONTEND: (useEffect 2) Error al obtener la publicaci√≥n ${data.publicationId} por fetch:`,
            error
          );
          // ¬øQu√© hacer si falla el fetch? ¬øMostrar un error al admin?
          // Podr√≠as a√±adir una entrada temporal con los datos del evento y marcarla como "incompleta"
        }
      }
    };

    socket.on(
      "validate-identity-document",
      handleIdentityDocumentValidationRequest
    );
    console.log(
      "ADMIN_FRONTEND: (useEffect 2) Oyente para 'validate-identity-document' REGISTRADO."
    );

    return () => {
      socket.off(
        "validate-identity-document",
        handleIdentityDocumentValidationRequest
      );
      console.log(
        "ADMIN_FRONTEND: (useEffect 2) Oyente para 'validate-identity-document' ELIMINADO."
      );
    };
  }, [socket]); // NUEVO -> Dependencia del socket

  const deleteValidatePublication = (id: string) => {
    console.log("ID recibido para eliminar:", id);

    setPublicaciones((prevPublicaciones) => {
      console.log("Publicaciones antes de eliminar:", prevPublicaciones);

      const nuevasPublicaciones = prevPublicaciones.filter(
        (pub) => pub.id !== id
      );

      console.log("Publicaciones despu√©s de eliminar:", nuevasPublicaciones);
      return nuevasPublicaciones;
    });

    // Actualizar localStorage
    const storedData = localStorage.getItem("publicaciones");
    console.log("Datos en localStorage antes de eliminar:", storedData);

    if (storedData) {
      const parsedData = JSON.parse(storedData);
      const updatedData = parsedData.filter(
        (pub: { id: string }) => pub.id !== id
      );

      localStorage.setItem("publicaciones", JSON.stringify(updatedData));
      console.log("LocalStorage actualizado:", updatedData);
    }
  };

  return (
    <>
      <div className="p-4">
        <h2 className="text-xl font-bold mb-4">Nueva Publicaci√≥n</h2>
        {publicaciones.length > 0 ? (
          publicaciones.map((publicacion, index) => (
            <div key={index} className="border p-4 rounded shadow">
              <p>
                <strong>Usuario ID:</strong>{" "}
                {publicacion?.userId || "Desconocido"}
              </p>
              <p>
                <strong>Publicaci√≥n ID:</strong> {publicacion?.id || "N/A"}
              </p>
              <p>
                <strong>Email:</strong> {publicacion?.email || "N/A"}
              </p>
              <p>
                <strong>Fecha de Envio para validar:</strong>{" "}
                {publicacion?.shippingDateValidate || "N/A"}
              </p>

              <h3 className="text-lg font-semibold mt-2">Im√°genes:</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-2">
                {publicacion.images.map((img, index) => {
                  const imageUrl = img.url; // Simplemente usa img.url directamente

                  return (
                    <div
                      key={index}
                      className="text-center group relative"
                      //={() => handleImageClick(imageUrl)}
                    >
                      <div className="mx-auto rounded-lg min-w-0 min-h-0">
                        <Image
                          src={imageUrl}
                          alt={`Imagen ${index + 1}`}
                          className={`rounded-lg transition-transform duration-500 ease-in-out ${
                            activeImages.includes(imageUrl)
                              ? "scale-[200%] origin-right-center"
                              : "group-hover:scale-[200%] origin-right-center"
                          }`}
                          width={400}
                          height={400}
                          style={{ objectFit: "contain" }}
                        />
                      </div>
                    </div>
                  );
                })}
              </div>

              <h3 className="text-lg font-semibold mt-8">
                Imagenes para validar:
              </h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-2">
                {publicacion.responseUrls &&
                  Object.entries(publicacion.responseUrls).map(([key, url]) => (
                    <div
                      key={key}
                      className="text-center group relative"
                      //onClick={() => handleImageClick(url)} // Manejar clic en la imagen
                    >
                      <p className="font-medium capitalize">{key}</p>
                      <div className="mx-auto rounded-lg min-w-0 min-h-0">
                        <Image
                          src={url}
                          alt={key}
                          className={`rounded-lg transition-transform duration-500 ease-in-out ${
                            activeImages.includes(url)
                              ? "scale-[200%] origin-right-center"
                              : "group-hover:scale-[200%] origin-right-center"
                          }`}
                          width={400}
                          height={400}
                          style={{ objectFit: "contain" }}
                        />
                      </div>
                    </div>
                  ))}

                {publicacion.identityDocumentUrls && (
                  <>
                    <h3 className="text-lg font-semibold mt-8">
                      Documentos de Identidad Adjuntos:
                    </h3>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-2">
                      {/* Documento Frontal */}
                      <div
                        key={`${publicacion.id}-docFront`} // Clave √∫nica
                        className="text-center group relative"
                        //onClick={() =>
                        //handleImageClick(
                        //publicacion.identityDocumentUrls!.documentFront
                        //)
                        //}
                      >
                        <p className="font-medium capitalize">
                          Documento Frontal
                        </p>
                        <div className="mx-auto rounded-lg min-w-0 min-h-0">
                          <Image
                            src={publicacion.identityDocumentUrls.documentFront}
                            alt={`Documento Frontal para Pub ID ${publicacion.id}`}
                            className={`rounded-lg transition-transform duration-500 ease-in-out ${
                              activeImages.includes(
                                publicacion.identityDocumentUrls.documentFront
                              )
                                ? "scale-[600%] origin-right-center"
                                : "group-hover:scale-[600%] origin-right-center"
                            }`}
                            width={600}
                            height={600}
                            style={{ objectFit: "contain" }}
                          />
                        </div>
                      </div>

                      {/* Documento Trasero */}
                      <div
                        key={`${publicacion.id}-docBack`} // Clave √∫nica
                        className="text-center group relative"
                        // onClick={() =>
                        //   handleImageClick(
                        //     publicacion.identityDocumentUrls!.documentBack
                        //   )
                        // }
                      >
                        <p className="font-medium capitalize">
                          Documento Trasero
                        </p>
                        <div className="mx-auto rounded-lg min-w-0 min-h-0">
                          <Image
                            src={publicacion.identityDocumentUrls.documentBack}
                            alt={`Documento Trasero para Pub ID ${publicacion.id}`}
                            className={`rounded-lg transition-transform duration-500 ease-in-out ${
                              activeImages.includes(
                                publicacion.identityDocumentUrls.documentBack
                              )
                                ? "scale-[600%] origin-right-center"
                                : "group-hover:scale-[600%] origin-right-center"
                            }`}
                            width={600}
                            height={600}
                            style={{ objectFit: "contain" }}
                          />
                        </div>
                      </div>
                    </div>
                  </>
                )}
                {/* FIN DEL NUEVO BLOQUE */}
              </div>

              <div className="flex justify-end mb-4">
                <Button
                  className="text-xl"
                  onClick={async () => {
                    try {
                      // Actualizar el estado en la base de datos
                      await UpdateStatePublication({
                        id: publicacion.id,
                        estado: "APROBADA",
                        razon: "",
                      });

                      console.log(
                        "Enviando evento actualizar-publicacion con:",
                        {
                          id: publicacion.id,
                          userId: publicacion.userId,
                          estado: "APROBADA",
                        }
                      );
                      socket?.emit("admin_tomo_decision", {
                        id: publicacion.id,
                        userId: publicacion.userId,
                        estado: "APROBADA",
                        razon: "", // Env√≠a una raz√≥n vac√≠a para consistencia
                      });
                      // Eliminar la publicaci√≥n de la pantalla y del localStorage
                      deleteValidatePublication(publicacion.id);
                    } catch (error) {
                      console.error(
                        "Error al actualizar el estado de la publicaci√≥n:",
                        error
                      );
                    }
                  }}
                >
                  APROBADA
                </Button>
              </div>
              <div className="flex justify-end mb-20">
                <Button
                  className="text-xl"
                  onClick={async () => {
                    const razonesRechazo = [
                      "la imagen del cartel est√° muy borrosa",
                      "la fecha del cartel no corresponde",
                      "la imagen est√° muy lejos",
                      "debe salir medio cuerpo",
                      "el rostro no coincide",
                      "la cara no se distingue bien",
                      "la imagen del rostro es borrosa",
                      "Por favor envia una foto legible por lado y lado de tu documento de identidad original (no fotocopia)",
                    ];

                    const razon = prompt(
                      "Escribe el n√∫mero de la raz√≥n de rechazo:\n" +
                        razonesRechazo
                          .map((r, i) => `${i + 1}. ${r}`)
                          .join("\n")
                    );

                    if (
                      !razon ||
                      isNaN(parseInt(razon)) ||
                      parseInt(razon) < 1 ||
                      parseInt(razon) > razonesRechazo.length
                    ) {
                      alert("Raz√≥n inv√°lida");
                      return;
                    }

                    const razonSeleccionada =
                      razonesRechazo[parseInt(razon) - 1];

                    try {
                      // Actualizar el estado en la base de datos
                      await UpdateStatePublication({
                        id: publicacion.id,
                        estado: "RECHAZADA",
                        razon: razonSeleccionada,
                      });

                      // Emitir el evento a trav√©s del socket
                      console.log(
                        "Enviando evento actualizar-publicacion con:",
                        {
                          id: publicacion.id,
                          userId: publicacion.userId,
                          estado: "RECHAZADA",
                          razon: razonSeleccionada,
                        }
                      );
                      socket?.emit("admin_tomo_decision", {
                        id: publicacion.id,
                        userId: publicacion.userId,
                        estado: "RECHAZADA",
                        razon: razonSeleccionada,
                      });
                      // Eliminar la publicaci√≥n de la pantalla y del localStorage
                      deleteValidatePublication(publicacion.id);
                    } catch (error) {
                      console.error("Error al rechazar la publicaci√≥n:", error);
                    }
                  }}
                >
                  NO APROBADA
                </Button>
              </div>
            </div>
          ))
        ) : (
          <p>No hay publicaciones pendientes por validar.</p>
        )}
      </div>

      <div>
        {/* Renderizar VIDEOS Y QUE SE PUEDAN REPRODUCIR */}

        {publicaciones.length > 0 && (
          <div className="mt-8">
            <h3 className="text-lg font-semibold mb-4">Videos:</h3>

            {publicaciones[0].videos?.map((video, index) => (
              <div
                key={index}
                className="relative w-full max-w-[500px] h-120 aspect-video border rounded-lg overflow-hidden bg-gray-200 shadow-sm"
              >
                <video
                  src={video.url}
                  controls
                  className="w-full h-full object-cover"
                />
              </div>
            ))}
          </div>
        )}
      </div>
    </>
  );
};

export default AdminPanel;
